/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./DatasetGridcomponent/index.ts":
/*!***************************************!*\
  !*** ./DatasetGridcomponent/index.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DataSetGrid = void 0;\n// Define const here\nvar RowRecordId = \"rowRecId\";\n// Style name of Load More Button\nvar DataSetControl_LoadMoreButton_Hidden_Style = \"DataSetControl_LoadMoreButton_Hidden_Style\";\nvar DataSetGrid = /** @class */function () {\n  /**\r\n   * Empty constructor.\r\n   */\n  function DataSetGrid() {\n    // no-op: method not leveraged by this example custom control\n  }\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\r\n   */\n  DataSetGrid.prototype.init = function (context, notifyOutputChanged, state, container) {\n    // Need to track container resize so that control could get the available width. The available height won't be provided even this is true\n    context.mode.trackContainerResize(true);\n    // Create main table container div. \n    this.mainContainer = document.createElement(\"div\");\n    // Create data table container div. \n    this.gridContainer = document.createElement(\"div\");\n    this.gridContainer.classList.add(\"DataSetControl_grid-container\");\n    // Create data table container div. \n    this.loadPageButton = document.createElement(\"button\");\n    this.loadPageButton.setAttribute(\"type\", \"button\");\n    this.loadPageButton.innerText = context.resources.getString(\"PCF_DataSetControl_LoadMore_ButtonLabel\");\n    this.loadPageButton.classList.add(DataSetControl_LoadMoreButton_Hidden_Style);\n    this.loadPageButton.classList.add(\"DataSetControl_LoadMoreButton_Style\");\n    this.loadPageButton.addEventListener(\"click\", this.onLoadMoreButtonClick.bind(this));\n    // Adding the main table and loadNextPage button created to the container DIV.\n    this.mainContainer.appendChild(this.gridContainer);\n    this.mainContainer.appendChild(this.loadPageButton);\n    this.mainContainer.classList.add(\"DataSetControl_main-container\");\n    container.appendChild(this.mainContainer);\n  };\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   */\n  DataSetGrid.prototype.updateView = function (context) {\n    this.contextObj = context;\n    this.toggleLoadMoreButtonWhenNeeded(context.parameters.dataSetGrid);\n    if (!context.parameters.dataSetGrid.loading) {\n      // Get sorted columns on View\n      var columnsOnView = this.getSortedColumnsOnView(context);\n      if (!columnsOnView || columnsOnView.length === 0) {\n        return;\n      }\n      while (this.gridContainer.firstChild) {\n        this.gridContainer.removeChild(this.gridContainer.firstChild);\n      }\n      this.gridContainer.appendChild(this.createGridBody(columnsOnView, context.parameters.dataSetGrid));\n    }\n    // this is needed to ensure the scroll bar appears automatically when the grid resize happens and all the tiles are not visible on the screen.\n    this.mainContainer.style.maxHeight = \"\".concat(window.innerHeight - this.gridContainer.offsetTop - 75, \"px\");\n  };\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as \"bound\" or \"output\"\r\n   */\n  DataSetGrid.prototype.getOutputs = function () {\n    return {};\n  };\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n  DataSetGrid.prototype.destroy = function () {\n    // no-op: method not leveraged by this example custom control\n  };\n  /**\r\n   * Get sorted columns on view\r\n   * @param context\r\n   * @return sorted columns object on View\r\n   */\n  DataSetGrid.prototype.getSortedColumnsOnView = function (context) {\n    if (!context.parameters.dataSetGrid.columns) {\n      return [];\n    }\n    var columns = context.parameters.dataSetGrid.columns.filter(function (columnItem) {\n      // some column are supplementary and their order is not > 0\n      return columnItem.order >= 0;\n    });\n    // Sort those columns so that they will be rendered in order\n    columns.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    return columns;\n  };\n  /**\r\n   * funtion that creates the body of the grid and embeds the content onto the tiles.\r\n   * @param columnsOnView columns on the view whose value needs to be shown on the UI\r\n   * @param gridParam data of the Grid\r\n   */\n  DataSetGrid.prototype.createGridBody = function (columnsOnView, gridParam) {\n    var gridBody = document.createElement(\"div\");\n    if (gridParam.sortedRecordIds.length > 0) {\n      var _loop_1 = function _loop_1(currentRecordId) {\n        var gridRecord = document.createElement(\"div\");\n        gridRecord.classList.add(\"DataSetControl_grid-item\");\n        gridRecord.addEventListener(\"click\", this_1.onRowClick.bind(this_1));\n        // Set the recordId on the row dom\n        gridRecord.setAttribute(RowRecordId, gridParam.records[currentRecordId].getRecordId());\n        columnsOnView.forEach(function (columnItem) {\n          var labelPara = document.createElement(\"p\");\n          labelPara.classList.add(\"DataSetControl_grid-text-label\");\n          var valuePara = document.createElement(\"p\");\n          valuePara.classList.add(\"DataSetControl_grid-text-value\");\n          labelPara.textContent = \"\".concat(columnItem.displayName, \" : \");\n          gridRecord.appendChild(labelPara);\n          if (gridParam.records[currentRecordId].getFormattedValue(columnItem.name) != null && gridParam.records[currentRecordId].getFormattedValue(columnItem.name) != \"\") {\n            valuePara.textContent = gridParam.records[currentRecordId].getFormattedValue(columnItem.name);\n            gridRecord.appendChild(valuePara);\n          } else {\n            valuePara.textContent = \"-\";\n            gridRecord.appendChild(valuePara);\n          }\n        });\n        gridBody.appendChild(gridRecord);\n      };\n      var this_1 = this;\n      for (var _i = 0, _a = gridParam.sortedRecordIds; _i < _a.length; _i++) {\n        var currentRecordId = _a[_i];\n        _loop_1(currentRecordId);\n      }\n    } else {\n      var noRecordLabel = document.createElement(\"div\");\n      noRecordLabel.classList.add(\"DataSetControl_grid-norecords\");\n      noRecordLabel.style.width = \"\".concat(this.contextObj.mode.allocatedWidth - 25, \"px\");\n      noRecordLabel.innerHTML = this.contextObj.resources.getString(\"PCF_DataSetControl_No_Record_Found\");\n      gridBody.appendChild(noRecordLabel);\n    }\n    return gridBody;\n  };\n  /**\r\n   * Row Click Event handler for the associated row when being clicked\r\n   * @param event\r\n   */\n  DataSetGrid.prototype.onRowClick = function (event) {\n    var _a;\n    var rowRecordId = event.currentTarget.getAttribute(RowRecordId);\n    if (rowRecordId) {\n      var entityName = this.contextObj.mode.contextInfo.entityTypeName;\n      var entityId = ((_a = this.contextObj.parameters.dataSetGrid.records[rowRecordId]) === null || _a === void 0 ? void 0 : _a.getRecordId()) || \"\";\n      var entityFormOptions = {\n        entityName: entityName,\n        entityId: entityId\n      };\n      this.contextObj.navigation.openForm(entityFormOptions);\n    }\n  };\n  /**\r\n   * Toggle 'LoadMore' button when needed\r\n   */\n  DataSetGrid.prototype.toggleLoadMoreButtonWhenNeeded = function (gridParam) {\n    if (gridParam.paging.hasNextPage && this.loadPageButton.classList.contains(DataSetControl_LoadMoreButton_Hidden_Style)) {\n      this.loadPageButton.classList.remove(DataSetControl_LoadMoreButton_Hidden_Style);\n    } else if (!gridParam.paging.hasNextPage && !this.loadPageButton.classList.contains(DataSetControl_LoadMoreButton_Hidden_Style)) {\n      this.loadPageButton.classList.add(DataSetControl_LoadMoreButton_Hidden_Style);\n    }\n  };\n  /**\r\n   * 'LoadMore' Button Event handler when load more button clicks\r\n   * @param event\r\n   */\n  DataSetGrid.prototype.onLoadMoreButtonClick = function () {\n    this.contextObj.parameters.dataSetGrid.paging.loadNextPage();\n    this.toggleLoadMoreButtonWhenNeeded(this.contextObj.parameters.dataSetGrid);\n  };\n  return DataSetGrid;\n}();\nexports.DataSetGrid = DataSetGrid;\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./DatasetGridcomponent/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./DatasetGridcomponent/index.ts"](0, __webpack_exports__);
/******/ 	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = __webpack_exports__;
/******/ 	
/******/ })()
;
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('PocketInvestnamespace.DataSetGrid', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.DataSetGrid);
} else {
	var PocketInvestnamespace = PocketInvestnamespace || {};
	PocketInvestnamespace.DataSetGrid = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.DataSetGrid;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}